



package com.gamesense.client.module.modules.exploits;

import com.gamesense.client.module.*;
import com.gamesense.api.setting.*;
import com.gamesense.api.event.events.*;
import me.zero.alpine.listener.*;
import java.util.function.*;
import com.gamesense.client.*;
import net.minecraft.network.*;
import net.minecraft.network.play.client.*;
import net.minecraft.util.*;
import net.minecraft.util.math.*;
import net.minecraft.init.*;

public class PlaceBypass extends Module
{
    public static Setting.Boolean eatingResync;
    @EventHandler
    private final Listener<PacketEvent.PostSend> postSendListener2;
    @EventHandler
    private final Listener<PacketEvent.PostSend> postSendListener;
    
    public PlaceBypass() {
        super("PlaceBypass", Module.Category.Exploits);
        this.postSendListener2 = (Listener<PacketEvent.PostSend>)new Listener(event -> {
            if (event.getPacket() instanceof CPacketPlayerTryUseItem && PlaceBypass.eatingResync.isOn() && PlaceBypass.mc.player.getHeldItem(EnumHand.MAIN_HAND) != null && PlaceBypass.mc.player.getHeldItem(EnumHand.MAIN_HAND).getItem() == Items.GOLDEN_APPLE) {
                PlaceBypass.mc.playerController.syncCurrentPlayItem();
            }
        }, new Predicate[0]);
        this.postSendListener = (Listener<PacketEvent.PostSend>)new Listener(event -> {
            if (event.getPacket() instanceof CPacketPlayerTryUseItemOnBlock) {
                final CPacketPlayerTryUseItemOnBlock packet = (CPacketPlayerTryUseItemOnBlock)event.getPacket();
                final BlockPos pos = packet.getPos();
                PlaceBypass.mc.player.connection.sendPacket((Packet)new CPacketPlayerTryUseItem(EnumHand.MAIN_HAND));
                PlaceBypass.mc.player.connection.sendPacket((Packet)new CPacketPlayerTryUseItem(EnumHand.OFF_HAND));
                PlaceBypass.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.RELEASE_USE_ITEM, pos, EnumFacing.DOWN));
                event.cancel();
            }
        }, new Predicate[0]);
    }
    
    public void onEnable() {
        GameSense.EVENT_BUS.subscribe((Object)this);
    }
    
    public void onDisable() {
        GameSense.EVENT_BUS.unsubscribe((Object)this);
    }
    
    public void setup() {
        PlaceBypass.eatingResync = this.registerBoolean("Eating resync", true);
    }
}
