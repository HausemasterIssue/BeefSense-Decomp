



package com.gamesense.client.module.modules.exploits;

import com.gamesense.client.module.*;
import me.zero.alpine.listener.*;
import com.gamesense.api.event.events.*;
import com.gamesense.api.event.*;
import java.util.function.*;
import net.minecraft.client.*;
import net.minecraft.network.*;
import net.minecraft.client.gui.inventory.*;
import net.minecraft.inventory.*;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.*;
import net.minecraft.client.gui.*;
import net.minecraft.init.*;
import net.minecraft.util.*;
import net.minecraft.block.*;

public class InfEchest extends Module
{
    private GuiContainer screen;
    private boolean enderChestDesynced;
    private boolean hideEnderChestGui;
    @EventHandler
    private final Listener<EventRightClickBlock> listener;
    @EventHandler
    private final Listener<EventDisplayGui> postSendListener3;
    @EventHandler
    private final Listener<PacketEvent.PostSend> postSendListener;
    @EventHandler
    private final Listener<EventSendPacket> postSendListener5;
    
    public InfEchest() {
        super("InfEchest", Module.Category.Exploits);
        this.hideEnderChestGui = false;
        this.listener = (Listener<EventRightClickBlock>)new Listener(event -> {
            if (event.getPos() != null) {
                final Block block = Minecraft.getMinecraft().world.getBlockState(event.getPos()).getBlock();
                if (block == Blocks.ENDER_CHEST) {
                    final float deltaX = (float)(event.getVec().xCoord - event.getPos().getX());
                    final float deltaY = (float)(event.getVec().yCoord - event.getPos().getY());
                    final float deltaZ = (float)(event.getVec().zCoord - event.getPos().getZ());
                    Minecraft.getMinecraft().player.connection.sendPacket((Packet)new CPacketPlayerTryUseItemOnBlock(event.getPos(), event.getFacing(), EnumHand.MAIN_HAND, deltaX, deltaY, deltaZ));
                    this.enderChestDesynced = true;
                }
                else if (block instanceof BlockContainer) {
                    this.resetBackupEnderChest();
                }
            }
        }, new Predicate[0]);
        this.postSendListener3 = (Listener<EventDisplayGui>)new Listener(event -> {
            if (event.getScreen() instanceof GuiContainer && !(event.getScreen() instanceof GuiInventory)) {
                this.screen = (GuiContainer)event.getScreen();
            }
            else if (event.getScreen() instanceof GuiInventory && this.enderChestDesynced && this.getScreen() != null) {
                this.hideEnderChestGui = false;
                event.setCanceled(true);
                Minecraft.getMinecraft().displayGuiScreen((GuiScreen)this.screen);
            }
        }, new Predicate[0]);
        this.postSendListener = (Listener<PacketEvent.PostSend>)new Listener(event -> {
            if (event.getPacket() instanceof CPacketPlayerTryUseItemOnBlock && event.getPacket() instanceof SPacketCloseWindow) {
                final SPacketCloseWindow packetCloseWindow = (SPacketCloseWindow)event.getPacket();
                this.resetBackupEnderChest();
            }
        }, new Predicate[0]);
        this.postSendListener5 = (Listener<EventSendPacket>)new Listener(event -> {
            if (event.getPacket() instanceof CPacketCloseWindow) {
                final CPacketCloseWindow packetCloseWindow = (CPacketCloseWindow)event.getPacket();
                if (this.getScreen() != null && this.enderChestDesynced) {
                    event.setCanceled(true);
                }
            }
            else if (event.getPacket() instanceof CPacketClickWindow) {
                final CPacketClickWindow packetClickWindow = (CPacketClickWindow)event.getPacket();
                if (packetClickWindow.getClickType().equals((Object)ClickType.THROW) && this.enderChestDesynced && this.getScreen() != null) {
                    this.hideEnderChestGui = true;
                }
                else if (packetClickWindow.getClickType().equals((Object)ClickType.THROW) && !this.enderChestDesynced) {
                    this.resetBackupEnderChest();
                }
            }
        }, new Predicate[0]);
    }
    
    public boolean hasBackupEnderChest() {
        return this.enderChestDesynced;
    }
    
    public void resetBackupEnderChest() {
        this.enderChestDesynced = false;
        this.hideEnderChestGui = false;
        this.setScreen(null);
    }
    
    public GuiContainer getScreen() {
        return this.screen;
    }
    
    public void setScreen(final GuiContainer screen) {
        this.screen = screen;
    }
    
    public void onDisable() {
        if (Minecraft.getMinecraft().world != null) {
            Minecraft.getMinecraft().player.connection.sendPacket((Packet)new CPacketCloseWindow(Minecraft.getMinecraft().player.inventoryContainer.windowId));
            this.resetBackupEnderChest();
        }
    }
    
    public void onUpdate() {
        final Minecraft mc = Minecraft.getMinecraft();
        if (mc.player == null) {
            return;
        }
        if (this.enderChestDesynced && this.hideEnderChestGui && mc.currentScreen instanceof GuiContainer && !(mc.currentScreen instanceof GuiInventory)) {
            mc.currentScreen = null;
            this.hideEnderChestGui = false;
        }
    }
    
    public void setup() {
    }
}
