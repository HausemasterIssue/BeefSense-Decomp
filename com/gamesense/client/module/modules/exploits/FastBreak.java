



package com.gamesense.client.module.modules.exploits;

import com.gamesense.client.module.*;
import com.gamesense.api.setting.*;
import me.zero.alpine.listener.*;
import java.util.function.*;
import java.util.*;
import net.minecraft.client.*;
import net.minecraft.potion.*;
import net.minecraft.util.*;
import net.minecraft.init.*;
import net.minecraft.network.play.client.*;
import net.minecraft.network.*;
import com.gamesense.api.event.events.*;
import java.awt.*;
import net.minecraft.world.*;
import com.gamesense.api.util.render.*;
import net.minecraft.util.math.*;
import net.minecraft.block.state.*;
import net.minecraft.block.*;
import com.gamesense.client.*;
import com.gamesense.api.util.misc.*;

public class FastBreak extends Module
{
    private BlockPos lastBlock;
    private EnumFacing direction;
    private Boolean packetCancel;
    private BlockPos renderBlock;
    private Timer breaktimer;
    Setting.Mode mode;
    Setting.Boolean haste;
    Setting.Integer delay;
    Setting.Boolean autoBreak;
    Setting.Boolean picOnly;
    Setting.Boolean chatInfo;
    Setting.ColorSetting customColor;
    Setting.Integer ufoAlpha;
    @EventHandler
    private final Listener<DamageBlockEvent> listener;
    
    public FastBreak() {
        super("FastBreak", Module.Category.Exploits);
        this.breaktimer = new Timer();
        this.listener = (Listener<DamageBlockEvent>)new Listener(event -> {
            if (FastBreak.mc.world == null || FastBreak.mc.player == null) {
                return;
            }
            if (this.canBreak(event.getBlockPos())) {
                if (this.mode.getValue().equalsIgnoreCase("Packet")) {
                    FastBreak.mc.player.swingArm(EnumHand.MAIN_HAND);
                    FastBreak.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, event.getBlockPos(), event.getEnumFacing()));
                    FastBreak.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, event.getBlockPos(), event.getEnumFacing()));
                    event.cancel();
                }
                if (this.mode.getValue().equalsIgnoreCase("Damage") && FastBreak.mc.playerController.curBlockDamageMP >= 0.7f) {
                    FastBreak.mc.playerController.curBlockDamageMP = 1.0f;
                }
                if (this.mode.getValue().equalsIgnoreCase("Instant") && this.canBreak(event.getBlockPos())) {
                    if (this.lastBlock == null || event.getBlockPos().x != this.lastBlock.x || event.getBlockPos().y != this.lastBlock.y || event.getBlockPos().z != this.lastBlock.z) {
                        if (this.chatInfo.isOn()) {
                            MessageBus.sendClientPrefixMessage("New block");
                        }
                        this.packetCancel = false;
                        if (this.chatInfo.isOn()) {
                            MessageBus.sendClientPrefixMessage(event.getBlockPos() + "|" + this.lastBlock);
                        }
                        FastBreak.mc.player.swingArm(EnumHand.MAIN_HAND);
                        FastBreak.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, event.getBlockPos(), event.getEnumFacing()));
                        this.packetCancel = true;
                    }
                    else {
                        this.packetCancel = true;
                    }
                    if (this.chatInfo.isOn()) {
                        MessageBus.sendClientPrefixMessage("Breaking....");
                    }
                    FastBreak.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, event.getBlockPos(), event.getEnumFacing()));
                    this.renderBlock = event.getBlockPos();
                    this.lastBlock = event.getBlockPos();
                    this.direction = event.getEnumFacing();
                    event.cancel();
                }
            }
        }, new Predicate[0]);
    }
    
    public void setup() {
        final ArrayList<String> Modes = new ArrayList<String>();
        Modes.add("Packet");
        Modes.add("Damage");
        Modes.add("Instant");
        this.delay = this.registerInteger("Delay", 20, 0, 500);
        this.picOnly = this.registerBoolean("PickOnly", true);
        this.autoBreak = this.registerBoolean("Autobreak", false);
        this.chatInfo = this.registerBoolean("ChatInfo", false);
        this.mode = this.registerMode("Mode", (List)Modes, "Packet");
        this.haste = this.registerBoolean("Haste", false);
        this.customColor = this.registerColor("Custom Color", new GSColor(0, 0, 255));
        this.ufoAlpha = this.registerInteger("UFOAlpha", 0, 0, 255);
    }
    
    public void onUpdate() {
        Minecraft.getMinecraft().playerController.blockHitDelay = 0;
        if (this.haste.getValue()) {
            final PotionEffect effect = new PotionEffect(MobEffects.HASTE, 80950, 1, false, false);
            FastBreak.mc.player.addPotionEffect(new PotionEffect(effect));
        }
        if (!this.haste.getValue() && FastBreak.mc.player.isPotionActive(MobEffects.HASTE)) {
            FastBreak.mc.player.removePotionEffect(MobEffects.HASTE);
        }
        if (this.renderBlock != null) {
            if (this.autoBreak.getValue() && this.breaktimer.passed((double)this.delay.getValue())) {
                if (this.picOnly.getValue() && FastBreak.mc.player.getHeldItem(EnumHand.MAIN_HAND).getItem() != Items.DIAMOND_PICKAXE) {
                    return;
                }
                FastBreak.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, this.renderBlock, this.direction));
                this.breaktimer.reset();
            }
            try {
                FastBreak.mc.playerController.blockHitDelay = 0;
            }
            catch (Exception e) {
                FastBreak.mc.world.sendQuittingDisconnectingPacket();
            }
        }
    }
    
    public void onWorldRender(final RenderEvent event) {
        if (this.renderBlock != null) {
            this.drawBlock(this.renderBlock, this.customColor.getValue(), true);
        }
    }
    
    private void drawBlock(final BlockPos blockPos, final GSColor color, final boolean bounding) {
        final int facing = 63;
        final GSColor color2 = new GSColor((Color)this.customColor.getValue());
        final AxisAlignedBB bb = FastBreak.mc.world.getBlockState(blockPos).getSelectedBoundingBox((World)FastBreak.mc.world, blockPos);
        RenderUtil.prepare();
        RenderUtil.drawBox(bb, true, 1.0, color2, this.ufoAlpha.getValue(), 63);
        RenderUtil.release();
    }
    
    private boolean canBreak(final BlockPos pos) {
        final IBlockState blockState = FastBreak.mc.world.getBlockState(pos);
        final Block block = blockState.getBlock();
        return block.getBlockHardness(blockState, (World)FastBreak.mc.world, pos) != -1.0f;
    }
    
    public void onEnable() {
        GameSense.EVENT_BUS.subscribe((Object)this);
    }
    
    public void onDisable() {
        GameSense.EVENT_BUS.unsubscribe((Object)this);
        FastBreak.mc.player.removePotionEffect(MobEffects.HASTE);
    }
    
    public BlockPos getTarget() {
        return this.renderBlock;
    }
    
    public void setTarget(final BlockPos pos) {
        this.renderBlock = pos;
        this.packetCancel = false;
        FastBreak.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, pos, EnumFacing.DOWN));
        this.packetCancel = true;
        FastBreak.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, pos, EnumFacing.DOWN));
        this.direction = EnumFacing.DOWN;
        this.lastBlock = pos;
    }
}
